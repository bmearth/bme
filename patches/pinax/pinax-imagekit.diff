Index: requirements/external_apps.txt
===================================================================
--- requirements/external_apps.txt	(revision 1502)
+++ requirements/external_apps.txt	(working copy)
@@ -11,7 +11,7 @@
 django-pagination
 django-robots
 django-messages
-http://django-photologue.googlecode.com/files/photologue-2.1.zip
+django-imagekit
 
 # Apps that we install by passing the svn path to easy_install (meh)
 http://django-tagging.googlecode.com/svn/trunk/
Index: projects/complete_project/apps/tag_app/views.py
===================================================================
--- projects/complete_project/apps/tag_app/views.py	(revision 1502)
+++ projects/complete_project/apps/tag_app/views.py	(working copy)
@@ -3,7 +3,7 @@
 
 from blog.models import Post
 from tagging.models import Tag, TaggedItem
-from photos.models import Image
+from photos.models import Photo
 from bookmarks.models import BookmarkInstance
 from projects.models import Project, Task
 from projects.models import Topic as ProjectTopic
@@ -18,7 +18,7 @@
     
     alltags = TaggedItem.objects.get_by_model(Post, tag).filter(status=2)
     
-    phototags = TaggedItem.objects.get_by_model(Image, tag)
+    phototags = TaggedItem.objects.get_by_model(Photo, tag)
     bookmarktags = TaggedItem.objects.get_by_model(BookmarkInstance, tag)
     
     project_tags = TaggedItem.objects.get_by_model(Project, tag).filter(deleted=False)
Index: projects/complete_project/apps/photos/admin.py
===================================================================
--- projects/complete_project/apps/photos/admin.py	(revision 1502)
+++ projects/complete_project/apps/photos/admin.py	(working copy)
@@ -1,5 +1,5 @@
 from django.contrib import admin
-from photos.models import Image, Pool
+from photos.models import Photo, Pool
 
 class PhotoAdmin(admin.ModelAdmin):
     list_display = ('title', 'title_slug', 'caption','date_added','is_public','member','safetylevel','tags',)    
@@ -7,5 +7,5 @@
 class PoolAdmin(admin.ModelAdmin):
     list_display = ('photo', )
 
-admin.site.register(Image, PhotoAdmin)
+admin.site.register(Photo, PhotoAdmin)
 admin.site.register(Pool, PoolAdmin)
Index: projects/complete_project/apps/photos/views.py
===================================================================
--- projects/complete_project/apps/photos/views.py	(revision 1502)
+++ projects/complete_project/apps/photos/views.py	(working copy)
@@ -8,8 +8,7 @@
 from django.contrib.auth.models import User
 from django.contrib.auth.decorators import login_required
 
-from photologue.models import *
-from photos.models import Image
+from photos.models import Photo
 from photos.forms import PhotoUploadForm, PhotoEditForm
 from projects.models import Project
 from tribes.models import Tribe
@@ -39,7 +38,7 @@
     """
     photos for the currently authenticated user
     """
-    photos = Image.objects.filter(member=request.user).order_by("-date_added")
+    photos = Photo.objects.filter(member=request.user).order_by("-date_added")
     return render_to_response(template_name, {
         "photos": photos,
     }, context_instance=RequestContext(request))
@@ -49,7 +48,7 @@
     """
     latest photos
     """
-    photos = Image.objects.filter(
+    photos = Photo.objects.filter(
         Q(is_public=True) |
         Q(is_public=False, member=request.user)
     ).order_by("-date_added")
@@ -62,11 +61,11 @@
     """
     show the photo details
     """
-    photo = get_object_or_404(Image, id=id)
+    photo = get_object_or_404(Photo, id=id)
     # @@@: test
     if not photo.is_public and request.user != photo.member:
         raise Http404
-    photo_url = photo.get_display_url()
+    photo_url = photo.display.url
     
     tribes = []
     projects = []
@@ -191,7 +190,7 @@
     Get the members photos and display them
     """
     user = get_object_or_404(User, username=username)
-    photos = Image.objects.filter(member__username=username, is_public=True).order_by("-date_added")
+    photos = Photo.objects.filter(member__username=username, is_public=True).order_by("-date_added")
     return render_to_response(template_name, {
         "photos": photos,
     }, context_instance=RequestContext(request))
@@ -199,8 +198,8 @@
 
 def edit(request, id, form_class=PhotoEditForm,
         template_name="photos/edit.html"):
-    photo = get_object_or_404(Image, id=id)
-    photo_url = photo.get_display_url()
+    photo = get_object_or_404(Photo, id=id)
+    photo_url = photo.display.url
 
     if request.method == "POST":
         if photo.member != request.user:
@@ -228,7 +227,7 @@
 edit = login_required(edit)
 
 def destroy(request, id):
-    photo = Image.objects.get(pk=id)
+    photo = Photo.objects.get(pk=id)
     title = photo.title
     if photo.member != request.user:
         request.user.message_set.create(message="You can't delete photos that aren't yours")
Index: projects/complete_project/apps/photos/specs.py
===================================================================
--- projects/complete_project/apps/photos/specs.py	(revision 0)
+++ projects/complete_project/apps/photos/specs.py	(revision 0)
@@ -0,0 +1,29 @@
+from imagekit.specs import ImageSpec 
+from imagekit import processors 
+
+# first we define our thumbnail resize processor 
+class ResizeThumb(processors.Resize): 
+    width = 100 
+    height = 75 
+    crop = True
+
+# now we define a display size resize processor
+class ResizeDisplay(processors.Resize):
+    width = 600 
+
+# now lets create an adjustment processor to enhance the image at small sizes 
+class EnchanceThumb(processors.Adjustment): 
+    contrast = 1.2 
+    sharpness = 1.1 
+
+# now we can define our thumbnail spec 
+class Thumbnail(ImageSpec): 
+    pre_cache = True 
+    processors = [ResizeThumb, EnchanceThumb] 
+
+# and our display spec
+class Display(ImageSpec):
+    pre_cache=True
+    increment_count = True
+    processors = [ResizeDisplay]
+
Index: projects/complete_project/apps/photos/fixtures/initial_data.json
===================================================================
--- projects/complete_project/apps/photos/fixtures/initial_data.json	(revision 1502)
+++ projects/complete_project/apps/photos/fixtures/initial_data.json	(working copy)
@@ -1,48 +0,0 @@
-[
-    {
-        "pk": 1,
-        "model": "photologue.photosize",
-        "fields": {
-            "name": "admin_thumbnail",
-            "watermark": null,
-            "increment_count": false,
-            "effect": null,
-            "crop": true,
-            "height": 75,
-            "width": 100,
-            "upscale": false,
-            "pre_cache": false,
-            "quality": 70
-        }
-    }, {
-        "pk": 2,
-        "model": "photologue.photosize",
-        "fields": {
-            "name": "thumbnail",
-            "watermark": null,
-            "increment_count": false,
-            "effect": null,
-            "crop": true,
-            "height": 75,
-            "width": 100,
-            "upscale": false,
-            "pre_cache": false,
-            "quality": 70
-        }
-    }, {
-        "pk": 3,
-        "model": "photologue.photosize",
-        "fields": {
-            "name": "display",
-            "watermark": null,
-            "increment_count": true,
-            "effect": null,
-            "crop": false,
-            "height": 0,
-            "width": 400,
-            "upscale": false,
-            "pre_cache": false,
-            "quality": 80
-        }
-    }
-]
Index: projects/complete_project/apps/photos/models.py
===================================================================
--- projects/complete_project/apps/photos/models.py	(revision 1502)
+++ projects/complete_project/apps/photos/models.py	(working copy)
@@ -1,6 +1,6 @@
 from django.db import models
 from django.contrib.auth.models import User
-from photologue.models import *
+from imagekit.models import ImageModel
 from datetime import datetime
 from django.contrib.contenttypes.models import ContentType
 from django.contrib.contenttypes import generic
@@ -27,7 +27,7 @@
         verbose_name = _('photo set')
         verbose_name_plural = _('photo sets')
 
-class Image(ImageModel):
+class Photo(ImageModel):
     """
     A photo with its details
     """
@@ -35,6 +35,23 @@
         (1, _('Safe')),
         (2, _('Not Safe')),
     )
+
+    crop_horz_choices = (
+       (0, 'left'),
+       (1, 'center'),
+       (2, 'right'),
+     )
+    crop_vert_choices = (
+      (0, 'top'),
+      (1, 'center'),
+      (2, 'bottom'),
+    )
+    image = models.ImageField(_('image'), upload_to='images')
+    view_count = models.IntegerField(default=0)
+    crop_horz = models.PositiveIntegerField(_('crop horizontal'),
+                             choices=crop_horz_choices,default=1)
+    crop_vert = models.PositiveIntegerField(_('crop vertical'),
+                            choices=crop_vert_choices, default=1)
     title = models.CharField(_('title'), max_length=200)
     title_slug = models.SlugField(_('slug'))
     caption = models.TextField(_('caption'), blank=True)
@@ -45,6 +62,11 @@
     photoset = models.ManyToManyField(PhotoSet, verbose_name=_('photo set'))
     tags = TagField()
 
+    class IKOptions:
+        spec_module = 'photos.specs'
+        save_count_as = 'view_count'
+        cache_dir = 'photos'
+
     def __unicode__(self):
         return self.title
 
@@ -57,7 +79,7 @@
     model for a photo to be applied to an object
     """
 
-    photo           = models.ForeignKey(Image)
+    photo           = models.ForeignKey(Photo)
     content_type    = models.ForeignKey(ContentType)
     object_id       = models.PositiveIntegerField()
     content_object  = generic.GenericForeignKey()
Index: projects/complete_project/apps/photos/forms.py
===================================================================
--- projects/complete_project/apps/photos/forms.py	(revision 1502)
+++ projects/complete_project/apps/photos/forms.py	(working copy)
@@ -2,12 +2,12 @@
 from datetime import datetime
 from django.utils.translation import ugettext_lazy as _
 
-from photos.models import Image
+from photos.models import Photo
 
 class PhotoUploadForm(forms.ModelForm):
     
     class Meta:
-        model = Image
+        model = Photo
         exclude = ('member','photoset','title_slug','effect','crop_from')
         
     def __init__(self, user=None, *args, **kwargs):
@@ -17,7 +17,7 @@
 class PhotoEditForm(forms.ModelForm):
     
     class Meta:
-        model = Image
+        model = Photo
         exclude = ('member','photoset','title_slug','effect','crop_from','image')
         
     def __init__(self, user=None, *args, **kwargs):
Index: projects/complete_project/settings.py
===================================================================
--- projects/complete_project/settings.py	(revision 1502)
+++ projects/complete_project/settings.py	(working copy)
@@ -49,7 +49,7 @@
 # Absolute path to the directory that holds media.
 # Example: "/home/media/media.lawrence.com/"
 
-MEDIA_ROOT = os.path.join(os.path.dirname(__file__), "site_media")
+MEDIA_ROOT = os.path.join(os.path.dirname(__file__), "media")
 
 # URL that handles the media served from MEDIA_ROOT.
 # Example: "http://media.lawrence.com"
@@ -149,7 +149,7 @@
     'bookmarks',
     'blog',
     'ajax_validation',
-    'photologue',
+    'imagekit',
     'avatar',
     'flag',
     'schedule',
Index: projects/complete_project/urls.py
===================================================================
--- projects/complete_project/urls.py	(revision 1502)
+++ projects/complete_project/urls.py	(working copy)
@@ -62,11 +62,11 @@
 
 ## @@@ for now, we'll use friends_app to glue this stuff together
 
-from photos.models import Image
+from photos.models import Photo
 
 friends_photos_kwargs = {
     "template_name": "photos/friends_photos.html",
-    "friends_objects_function": lambda users: Image.objects.filter(member__in=users),
+    "friends_objects_function": lambda users: Photo.objects.filter(member__in=users),
 }
 
 from blog.models import Post
